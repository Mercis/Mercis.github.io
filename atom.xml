<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dannisi.xin/"/>
  <updated>2018-11-10T02:22:35.108Z</updated>
  <id>http://www.dannisi.xin/</id>
  
  <author>
    <name>Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MAC手动编译程序和扩展</title>
    <link href="http://www.dannisi.xin/2018/11/10/MAC%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F%E5%92%8C%E6%89%A9%E5%B1%95/"/>
    <id>http://www.dannisi.xin/2018/11/10/MAC手动编译程序和扩展/</id>
    <published>2018-11-10T01:20:16.000Z</published>
    <updated>2018-11-10T02:22:35.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>18年开始新版的homebrew已经去掉了很多扩展,只好手动编译了.
</code></pre><hr>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="一-配置与环境"><a href="#一-配置与环境" class="headerlink" title="一 配置与环境"></a>一 配置与环境</h3><pre><code>MAC OS : 10.13
PHP    : PHP7.1
gcc    : gcc4.9
swoole : swoole4.2

环境依赖:
仅支持 Linux、FreeBSD、MacOS 三种操作系统
在Windows平台，可使用CygWin或WSL(Windows Subsystem for Linux)
Linux 内核版本 2.3.32 以上
gcc4.4 以上版本或者clang
4.x版本起需要gcc-4.8或更高版本, 编译失败请先尝试升级gcc
编译为 libswoole.so 作为 C/C++ 库时需要使用 cmake-2.4 或更高版本
建议使用 Ubuntu14、CentOS7 或更高版本的操作系统
</code></pre><a id="more"></a>
<pre><code>PHP版本依赖:
Swoole-1.x需要 PHP-5.3.10 或更高版本
Swoole-2.x需要 PHP-7.0.0 或更高版本
Swoole-4.x需要 PHP-7.1.0 或更高版本
不依赖 PHP 的 stream、sockets、pcntl、posix、sysvmsg 等扩展。PHP 只需安装最基本的扩展即可
</code></pre><h3 id="二-编译"><a href="#二-编译" class="headerlink" title="二 编译"></a>二 编译</h3><pre><code>1.下载swoole
https://github.com/swoole/swoole-src/releases
我的电脑是Mac自带PHP7.1,果断选择最新的4.2装起来
2.升级gcc(非必须)
swoole4.x需要更高的gcc版本,如果你装swoole2.x或者swoole1.x Mac自带的4.2完全能搞定.
&gt; 查看gcc版本
brew search gcc
&gt; 安装gcc
brew install gcc@4.9
&gt; 设置环境变量
vi .bash_profile 写入
    alias gcc=&quot;gcc-4.9&quot;
    alias g++=&quot;g++-4.9&quot;
    alias cc=&quot;gcc-4.9&quot;
    alias c++=&quot;c++-4.9&quot;

3.编译安装
&gt; cd swoole-4.2.6 (解压好的文件的目录)
&gt; phpize
提示Cannot find autoconf. Please check your autoconf installation and the  $PHP_AUTOCONF environment variable. Then, rerun this script.
解决方法: brew install autoconf
&gt; ./configure --with-php-config=/usr/bin/php-config
&gt; make &amp;&amp; sudo make install
出现cp: /usr/lib/php/extensions/non-debug-.../swoole.so Operation not permitted 不要慌
重启电脑:按住Command＋R 进入恢复模式，打开terminal，键入：csrutil disable
cp swoole.so /usr/lib/php/extensions/non-debug-.../
要重新恢复，按住Command＋R 进入恢复模式，打开terminal，键入:csrutil disable
这个是Mac系统防止恶意修改文件
</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code>整完一次,下次装别的扩展也不用过分依赖brew了,前提是要自己管理好软件和扩展的安装位置    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;18年开始新版的homebrew已经去掉了很多扩展,只好手动编译了.
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;编译安装&quot;&gt;&lt;a href=&quot;#编译安装&quot; class=&quot;headerlink&quot; title=&quot;编译安装&quot;&gt;&lt;/a&gt;编译安装&lt;/h2&gt;&lt;h3 id=&quot;一-配置与环境&quot;&gt;&lt;a href=&quot;#一-配置与环境&quot; class=&quot;headerlink&quot; title=&quot;一 配置与环境&quot;&gt;&lt;/a&gt;一 配置与环境&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;MAC OS : 10.13
PHP    : PHP7.1
gcc    : gcc4.9
swoole : swoole4.2

环境依赖:
仅支持 Linux、FreeBSD、MacOS 三种操作系统
在Windows平台，可使用CygWin或WSL(Windows Subsystem for Linux)
Linux 内核版本 2.3.32 以上
gcc4.4 以上版本或者clang
4.x版本起需要gcc-4.8或更高版本, 编译失败请先尝试升级gcc
编译为 libswoole.so 作为 C/C++ 库时需要使用 cmake-2.4 或更高版本
建议使用 Ubuntu14、CentOS7 或更高版本的操作系统
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.dannisi.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MAC" scheme="http://www.dannisi.xin/tags/MAC/"/>
    
      <category term="swoole" scheme="http://www.dannisi.xin/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>Yii2+vue跨域问题解决</title>
    <link href="http://www.dannisi.xin/2018/09/20/Yii2-vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.dannisi.xin/2018/09/20/Yii2-vue跨域问题解决/</id>
    <published>2018-09-20T01:19:16.000Z</published>
    <updated>2018-09-20T06:55:17.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>最近公司想提升档次,就拿我们的PC页面开刀(我觉得YII自带的views蛮好的啊,前端插件也很多),没办法,
只能改了,遇到了一个坑就是跨域.
</code></pre><a id="more"></a>
<h3 id="跨域和同源"><a href="#跨域和同源" class="headerlink" title="跨域和同源"></a>跨域和同源</h3><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域:"></a>跨域:</h4><pre><code>就是跨域名，跨端口，跨协议

     例如：如果有两个服务器，服务器A和服务器B,服务器A上存储了php数据，script,甚至是css这些文件，而你在服务器B上只写了html，然后你所在的服务器B上动态创建script，css，php数据(使用ajax请求),向服务器A上请求你想要的script,css，php数请求据(使用ajax)这些文件，请求这些文件后，你再在服务器B上运行你的html，虽然你的地址是在服务器B上，但是你还是可以运行效果与在服务器A上运行的效果是一样的，这样就是跨域名，跨端口，跨协议，实现了跨域。

　　简单来说，就是你请求的文件，只要含有“src”,“href”这些属性，你就能在其他服务器上，请求你所需要的文件，然后在自己的服务器上运行，就实现了跨域（跨域名，跨端口，跨协议）。

原生的动态请求script文件 

　　var _script = document.createElement(&quot;script&quot;);
　　_script.src=&quot;http://10.9.156.108/html5/Ajax/api/sendMessage.php?user=&quot;+_user+&quot;message=&quot;+_message;
　　_script.type=&quot;text/javascript&quot;;

jQuery跨域请求script文件

$(document).ready(function(){
　　//getJSON 后面带参数，如果不带参数默认不跨域 ，带了参数跨域

　　//跨域优先
　　$.&lt;link rel=&quot;icon&quot; href=&quot;../img/favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;(&quot;http://10.9.156.108/HTML5/lesson24/test.js?callback=?&quot;,[data],function(){});

　　//跨域  有getJSON 和 jsonp 两种方式(当然,我们现在说说别的)
　　$.get(&quot;http://10.9.156.108/HTML5/lesson24/test.js=&quot;,null,function(){},&quot;jsonp&quot;);
　　　
}); 
</code></pre><h4 id="同源"><a href="#同源" class="headerlink" title="同源:"></a>同源:</h4><pre><code>就是同域名，同端口，同协议

例如：如果你有一个服务器A，你所需要的script，css，php文件都在服务器A，你写的html也在服务器A上，然后运行，出现了效果，如果你想在另一台电脑上运行你的项目（注意另一台电脑无论有没有开启服务器，效果还是会显示出来的），只要把你写在服务器A上的协议，域名，端口以及你的项目名称复制下来，在另一台电脑上运行，同样会出现相同的效果，这就实现了同源。
</code></pre><h3 id="Yii2-vue-js"><a href="#Yii2-vue-js" class="headerlink" title="Yii2 + vue.js"></a>Yii2 + vue.js</h3><h4 id="yii2写接口-无需验证-vue写前端"><a href="#yii2写接口-无需验证-vue写前端" class="headerlink" title="yii2写接口(无需验证),vue写前端"></a>yii2写接口(无需验证),vue写前端</h4><pre><code>1.apache服务器:
啥都不要配置,vue那个写个代理配置就行

2.nginx服务器
加个几行header配置:
add_header Access-Control-Allow-Origin *;
add_header Access-Control-Allow-Headers X-Requested-With;
add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
</code></pre><h4 id="yii2-restful-token验证-vue前端"><a href="#yii2-restful-token验证-vue前端" class="headerlink" title="yii2+restful+token验证,vue前端"></a>yii2+restful+token验证,vue前端</h4><pre><code>这个还是比较重要的,流着泪填坑......
</code></pre><blockquote>
<ul>
<li>这里我们的前端同学们就可以喝喝茶,当个吃瓜群众了.</li>
<li>当页面上出现类似的报错,恭喜你,请跟我来.</li>
</ul>
</blockquote>
<p><img src="/images/ky_1.png" alt="跨域"><br><img src="/images/ky_2.png" alt="跨域"></p>
<blockquote>
<ul>
<li>经过一系列的挣扎,最后总结如下(借鉴了一名无名同学)</li>
</ul>
</blockquote>
<pre><code>1.我们这里首先把nginx配置给注释掉

2.配置响应头 项目config目录main.php中
&apos;response&apos; =&gt; [
      &apos;class&apos; =&gt; &apos;yii\web\Response&apos;,
      &apos;on beforeSend&apos; =&gt; function ($event) {
          $response = $event-&gt;sender;
          $response-&gt;format = yii\web\Response::FORMAT_JSON;
          $code = $response-&gt;getStatusCode();
          if ($code == 401) {
              $response-&gt;data = [
                  &apos;code&apos; =&gt; 401,
                  &apos;msg&apos; =&gt; &apos;token 验证失败^-^.&apos;
              ];
          }
          $msg = !empty($response-&gt;data[&apos;msg&apos;]) ? $response-&gt;data[&apos;msg&apos;] : yii\web\Response::$httpStatuses[$code];
          $code = !empty($response-&gt;data[&apos;code&apos;]) ? $response-&gt;data[&apos;code&apos;] : $code;
          $data = !empty($response-&gt;data[&apos;data&apos;]) ? $response-&gt;data[&apos;data&apos;] : [];
          ##### 从这里开始 #####
          $response-&gt;headers-&gt;set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);
          $response-&gt;headers-&gt;set(&apos;Access-Control-Allow-Methods&apos;, &apos;GET,POST,OPTIONS&apos;);
          $response-&gt;headers-&gt;set(&apos;Access-Control-Request-Headers&apos;, &apos;Origin,X-Requested-With, Content-Type, Accept, Token&apos;);
          //这两个很重要,token在header必须要这样设置
          $response-&gt;headers-&gt;set(&apos;Access-Control-Expose-Headers&apos;, &apos;token&apos;);
          $response-&gt;headers-&gt;set(&apos;Access-Control-Allow-Headers&apos;, &apos;token&apos;);
          //加这个是为了骗过OPTIONS请求
          if (Yii::$app-&gt;request-&gt;getMethod() == &apos;OPTIONS&apos;) {
              $response-&gt;setStatusCode(200);
          }

          $response-&gt;data = renderJSON($msg, $data, $code);
      },
  ],

3. 在自定义的基础控制器:
public function behaviors()
{
    #这个是我需要用token验证
    $behaviors = ArrayHelper::merge(parent::behaviors(), [
        &apos;authenticator&apos; =&gt; [
            &apos;class&apos; =&gt; QueryParamAuth::className(),
            &apos;tokenParam&apos; =&gt; &apos;token&apos;,
        ]
    ]);
    #这是将验证器赋值给变量,删除验证
    $auth = $behaviors[&apos;authenticator&apos;];
    unset($behaviors[&apos;authenticator&apos;]);
    #这里是跨域设置
    $behaviors[&apos;corsFilter&apos;] = [
        &apos;class&apos; =&gt; \yii\filters\Cors::className(),
    ];
    #当跳过跨域之后,要对请求的URL进行token验证
    $behaviors[&apos;authenticator&apos;] = $auth;
    $behaviors[&apos;authenticator&apos;][&apos;except&apos;] = [&apos;options&apos;];
    return $behaviors;
}
</code></pre><p><img src="/images/ky_3.jpg" alt="跨域">    </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>面对这些问题,尽量在后端解决,公司里的前端小伙伴太少了,好好珍惜...
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;最近公司想提升档次,就拿我们的PC页面开刀(我觉得YII自带的views蛮好的啊,前端插件也很多),没办法,
只能改了,遇到了一个坑就是跨域.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.dannisi.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="yii" scheme="http://www.dannisi.xin/tags/yii/"/>
    
      <category term="Cross Domain" scheme="http://www.dannisi.xin/tags/Cross-Domain/"/>
    
  </entry>
  
  <entry>
    <title>Yii2插件使用</title>
    <link href="http://www.dannisi.xin/2018/07/11/Yii2%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.dannisi.xin/2018/07/11/Yii2插件使用/</id>
    <published>2018-07-11T02:14:44.000Z</published>
    <updated>2018-08-27T06:38:09.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>后面几篇文章分享一下常用一些YII2的插件，尤其是一些前端插件，用了都说好
</code></pre><hr>
<h2 id="一-时间选择器"><a href="#一-时间选择器" class="headerlink" title="一 时间选择器"></a>一 时间选择器</h2><pre><code>使用的是 ：kartik-v/yii2-widget-datepicker，可能会很熟悉这个组织的强大。
</code></pre><a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>1. 为什么要它呢？当然你自己写时间选择器也行，我觉得吧，重复造轮子的时间不如喝喝茶呢。

2. 这个插件通常我会用在index（数据筛选用）、form（参数）。

3. index 中
如果你用的是gridview 代码就这样
    use kartik\date\DatePicker; 
    [
        &apos;label&apos; =&gt; &apos;任务时间&apos;,
        &apos;attribute&apos; =&gt; &apos;start_at&apos;,
        &apos;value&apos; =&gt; function ($model) {
            return date(&apos;Y-m-d H:i:s&apos;, $model-&gt;start_at) . &apos;~~~&apos; . date(&apos;Y-m-d H:i:s&apos;, $model-&gt;end_at);
        },
        &apos;filter&apos; =&gt; DatePicker::widget([    // 日期组件
            &apos;model&apos; =&gt; $searchModel,
            &apos;language&apos; =&gt; Yii::$app-&gt;language,
            &apos;attribute&apos; =&gt; &apos;start_at&apos;,
            &apos;value&apos; =&gt; $searchModel-&gt;start_at,
            &apos;options&apos; =&gt; [&apos;readonly&apos; =&gt; true],
            &apos;pluginOptions&apos; =&gt; [
                &apos;autoclose&apos; =&gt; true,
                &apos;format&apos; =&gt; &apos;yyyy-mm-dd&apos;,
                &apos;todayHighlight&apos; =&gt; true,
            ]
        ])
    ],

4. form 中
    use kartik\date\DatePicker;
    &lt;?= $form-&gt;field($model, &apos;start_at&apos;)-&gt;label(&apos;开始时间&apos;)-&gt;widget(DatePicker::className(), [
        &apos;options&apos; =&gt; [&apos;placeholder&apos; =&gt; &apos;&apos;],
        &apos;pluginOptions&apos; =&gt; [
            &apos;autoclose&apos; =&gt; true,
            &apos;format&apos; =&gt; &apos;yyyy-mm-dd&apos;,
            &apos;todayHighlight&apos; =&gt; true,
        ]
    ]); ?&gt;
</code></pre><hr>
<h2 id="二-select2"><a href="#二-select2" class="headerlink" title="二 select2"></a>二 select2</h2><pre><code>这个插件在开发过程中会经常用到,尤其是在有多选的需求时
还是这个组织的\kartik\select2\Select2
</code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre><code>&lt;?php
#已保存的
$model-&gt;item = $item_hash;
echo $form-&gt;field($model, &apos;item&apos;)-&gt;label(false)-&gt;widget(\kartik\select2\Select2::classname(), [
    &apos;name&apos; =&gt; &apos;属性名称&apos;,
     #
    &apos;data&apos; =&gt; $item_hash,
    &apos;language&apos; =&gt; &apos;cn&apos;,
    &apos;maintainOrder&apos; =&gt; true,
    &apos;toggleAllSettings&apos; =&gt; [
        &apos;selectLabel&apos; =&gt; &apos;&lt;i class =&quot;glyphicon glyphicon-ok-circle&quot;&gt;&lt;/i&gt;标记全部&apos;,
        &apos;unselectLabel&apos; =&gt; &apos;&lt;i class =&quot;glyphicon glyphicon-remove-circle&quot;&gt; &lt;/i&gt;取消全部&apos;,
        &apos;selectOptions&apos; =&gt; [&apos;class&apos; =&gt; &apos;text-success&apos;],
        &apos;unselectOptions&apos; =&gt; [&apos;class&apos; =&gt; &apos;text-danger&apos;],
    ],
    &apos;options&apos; =&gt; [&apos;placeholder&apos; =&gt; &apos;属性名称...&apos;, &apos;multiple&apos; =&gt; true],
    &apos;pluginOptions&apos; =&gt; [
        &apos;tags&apos; =&gt; true,
    ],
]);
?&gt;
</code></pre><p> 附上效果图:<br> <img src="/images/xiaoguotu1.jpg" alt="select2"><br> <img src="/images/xiaoguotu2.jpg" alt="select2"></p>
<p> 未完待续。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;后面几篇文章分享一下常用一些YII2的插件，尤其是一些前端插件，用了都说好
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;一-时间选择器&quot;&gt;&lt;a href=&quot;#一-时间选择器&quot; class=&quot;headerlink&quot; title=&quot;一 时间选择器&quot;&gt;&lt;/a&gt;一 时间选择器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用的是 ：kartik-v/yii2-widget-datepicker，可能会很熟悉这个组织的强大。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.dannisi.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="yii" scheme="http://www.dannisi.xin/tags/yii/"/>
    
      <category term="datepicker" scheme="http://www.dannisi.xin/tags/datepicker/"/>
    
  </entry>
  
  <entry>
    <title>yii2学习心得(二)</title>
    <link href="http://www.dannisi.xin/2018/07/10/%E6%97%A5%E5%BF%97/"/>
    <id>http://www.dannisi.xin/2018/07/10/日志/</id>
    <published>2018-07-10T08:53:55.000Z</published>
    <updated>2018-07-10T09:10:41.229Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 日志文件按照等级分为（error waring info），在写程序的过程中经常需要我们输出日志，当然我们也想自定义设置日志。</p>
<hr>
<h2 id="一-yii2-配置log"><a href="#一-yii2-配置log" class="headerlink" title="一 yii2 配置log"></a>一 yii2 配置log</h2><p> 以yii高级版为例，经常会在api目录打印日志，之前有个坑就是把打印的日志跟输出的结果都给了前端，前端调了半天，差点哭了。<br> 不多说了，上代码：<br> main.php:<br> [<br>   ‘class’ =&gt; ‘yii\log\FileTarget’,<br>   ‘levels’ =&gt; [‘info’],//记录日志的级别<br>   ‘logFile’ =&gt; ‘@api/runtime/logs/‘ . date(‘Y-m-d’) . ‘_info.log’,<br>   ‘categories’ =&gt; [‘自定义’],//自定义日志<br> ],</p>
<hr>
<a id="more"></a>
<h2 id="二-输出日志"><a href="#二-输出日志" class="headerlink" title="二 输出日志"></a>二 输出日志</h2><p> controller里，你需要打印的地方，加上Yii::info($message,$categories);<br> 是不是很简单。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt; 日志文件按照等级分为（error waring info），在写程序的过程中经常需要我们输出日志，当然我们也想自定义设置日志。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一-yii2-配置log&quot;&gt;&lt;a href=&quot;#一-yii2-配置log&quot; class=&quot;headerlink&quot; title=&quot;一 yii2 配置log&quot;&gt;&lt;/a&gt;一 yii2 配置log&lt;/h2&gt;&lt;p&gt; 以yii高级版为例，经常会在api目录打印日志，之前有个坑就是把打印的日志跟输出的结果都给了前端，前端调了半天，差点哭了。&lt;br&gt; 不多说了，上代码：&lt;br&gt; main.php:&lt;br&gt; [&lt;br&gt;   ‘class’ =&amp;gt; ‘yii\log\FileTarget’,&lt;br&gt;   ‘levels’ =&amp;gt; [‘info’],//记录日志的级别&lt;br&gt;   ‘logFile’ =&amp;gt; ‘@api/runtime/logs/‘ . date(‘Y-m-d’) . ‘_info.log’,&lt;br&gt;   ‘categories’ =&amp;gt; [‘自定义’],//自定义日志&lt;br&gt; ],&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.dannisi.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="yii" scheme="http://www.dannisi.xin/tags/yii/"/>
    
      <category term="log" scheme="http://www.dannisi.xin/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>php cgi</title>
    <link href="http://www.dannisi.xin/2018/04/28/php-cgi/"/>
    <id>http://www.dannisi.xin/2018/04/28/php-cgi/</id>
    <published>2018-04-28T02:09:22.000Z</published>
    <updated>2018-04-28T03:07:39.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h2><blockquote>
<ul>
<li>通用网关接口(啥意思?),我们可以认为他是已做协议,作为web服务处理请求的协议. </li>
<li>web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</li>
<li>好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。</li>
<li>Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。</li>
<li>仔细想想，你在PHP代码中使用的用户从哪里来的。</li>
<li>当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器.</li>
</ul>
</blockquote>
<hr>
<h2 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h2><blockquote>
<ul>
<li>也是一种协议，只不过是cgi的优化版.</li>
</ul>
</blockquote>
<hr>
<a id="more"></a>
<h2 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h2><blockquote>
<ul>
<li>是对php-cgi的改进版，它直接管理多个php-cgi进程/线程.</li>
<li>前面说了，php-fpm是php-cgi的进程管理器。</li>
<li>这种交互方式实际上是让php-cgi以独立于httpd的方式存在，目前基本使用php-fpm的方式管理php-cgi进程。</li>
<li>也就是说，这种模式下，php-cgi和httpd已经分离了，它们的分离意味着请求的动静分离变为可能：httpd和php-fpm分别运行在不同服务器上。</li>
<li>动静分离后，压力也分散到各自的服务器上. </li>
<li>是的，修改php.ini之后，php-cgi进程的确是没办法平滑重启的。</li>
<li>php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以歇着了，通过这种机制来平滑过度。</li>
</ul>
</blockquote>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>   当然,这些看完是不是一脸懵逼的, ps aux | grep php-fpm 你就能看到你想看到了,是不是php的进程都是被php-fpm掌控着</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;cgi&quot;&gt;&lt;a href=&quot;#cgi&quot; class=&quot;headerlink&quot; title=&quot;cgi&quot;&gt;&lt;/a&gt;cgi&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通用网关接口(啥意思?),我们可以认为他是已做协议,作为web服务处理请求的协议. &lt;/li&gt;
&lt;li&gt;web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。&lt;/li&gt;
&lt;li&gt;好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。&lt;/li&gt;
&lt;li&gt;Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。&lt;/li&gt;
&lt;li&gt;仔细想想，你在PHP代码中使用的用户从哪里来的。&lt;/li&gt;
&lt;li&gt;当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;fastcgi&quot;&gt;&lt;a href=&quot;#fastcgi&quot; class=&quot;headerlink&quot; title=&quot;fastcgi&quot;&gt;&lt;/a&gt;fastcgi&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;也是一种协议，只不过是cgi的优化版.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.dannisi.xin/categories/php/"/>
    
    
      <category term="cgi" scheme="http://www.dannisi.xin/tags/cgi/"/>
    
      <category term="fastcgi" scheme="http://www.dannisi.xin/tags/fastcgi/"/>
    
      <category term="php-fpm" scheme="http://www.dannisi.xin/tags/php-fpm/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://www.dannisi.xin/2018/04/12/redis/"/>
    <id>http://www.dannisi.xin/2018/04/12/redis/</id>
    <published>2018-04-12T06:05:02.000Z</published>
    <updated>2018-04-12T08:03:41.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关与yii2封装的redis的安装使用"><a href="#关与yii2封装的redis的安装使用" class="headerlink" title="关与yii2封装的redis的安装使用"></a>关与yii2封装的redis的安装使用</h2><pre><code>安装redis扩展就不介绍了,进入主题
</code></pre><hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>composer require --prefer-dist yiisoft/yii2-redis
</code></pre><hr>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre><code>&apos;components&apos; =&gt; [
    &apos;redis&apos; =&gt; [
        &apos;class&apos; =&gt; &apos;yii\redis\Connection&apos;,
        &apos;hostname&apos; =&gt; &apos;localhost&apos;,
        &apos;port&apos; =&gt; 6379,
        &apos;database&apos; =&gt; 0,
        &apos;password&apos;=&gt;&apos;123456&apos;
    ],
] 
</code></pre><hr>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><pre><code>$redis = Yii::$app-&gt;redis; //实例化
$result = $redis-&gt;executeCommand(&apos;hmset&apos;, [&apos;test&apos;, &apos;key1&apos;, &apos;val1&apos;, &apos;key2&apos;, &apos;val2&apos;]);
</code></pre><hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h3><blockquote>
<ul>
<li>是Redis最基本的数据类型，可以理解成memcached一模一样的类型，一个key对应一个value</li>
<li>二进制安全的，意思是Redis的string可以包含任何数据。比如jpg图片或者序列化的对象</li>
<li>一个键最大的存储512MB</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;name&quot;:&quot;hello&quot;,</div><div class="line">&quot;age&quot;:&quot;25&quot;,</div><div class="line">&quot;city&quot;:&quot;shanghai&quot;</div></pre></td></tr></table></figure>
<h3 id="hash-散列"><a href="#hash-散列" class="headerlink" title="hash 散列"></a>hash 散列</h3><blockquote>
<ul>
<li>是一个键值对集合</li>
<li>是一个string类型的field和value的映射表，hash特别适合用于存储对象</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;user&quot;:[</div><div class="line">	&quot;name1&quot;:&quot;test1&quot;,</div><div class="line">	&quot;name2&quot;:&quot;test2&quot;,</div><div class="line"> 	&quot;name3&quot;:&quot;test3&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><p><code>item 可重复</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;user&quot;:[</div><div class="line">	&quot;test1&quot;,</div><div class="line">  	&quot;test2&quot;,</div><div class="line">  	&quot;test1&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h3><p><code>item 不可重复 
Redis的set是string类型的无序集合</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;user&quot;:[</div><div class="line">	&quot;test1&quot;,</div><div class="line">	&quot;test2&quot;,</div><div class="line">	&quot;test3&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset 有序集合"></a>zset 有序集合</h3><p><code>zset和set一样也是string类型的集合，且item不可重复
zset和set不同的地方在于zset关联一个double类型的分数，Redis通过分数对集合中的item排序
zset的item是唯一的，但是分数是可以重复的</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;user&quot;:[</div><div class="line">	&quot;test1&quot;,</div><div class="line">	&quot;test2&quot;,</div><div class="line">	&quot;test3&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关与yii2封装的redis的安装使用&quot;&gt;&lt;a href=&quot;#关与yii2封装的redis的安装使用&quot; class=&quot;headerlink&quot; title=&quot;关与yii2封装的redis的安装使用&quot;&gt;&lt;/a&gt;关与yii2封装的redis的安装使用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;安装redis扩展就不介绍了,进入主题
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;composer require --prefer-dist yiisoft/yii2-redis
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.dannisi.xin/categories/php/"/>
    
    
      <category term="redis" scheme="http://www.dannisi.xin/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>yii2学习心得(一)</title>
    <link href="http://www.dannisi.xin/2017/08/14/Yii/"/>
    <id>http://www.dannisi.xin/2017/08/14/Yii/</id>
    <published>2017-08-14T06:07:07.000Z</published>
    <updated>2017-08-14T07:17:06.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>给大家分享一些这段时间我学习yii2 踩得一些坑</p>
<hr>
<h2 id="一-关于安装yii2-高级模板"><a href="#一-关于安装yii2-高级模板" class="headerlink" title="一 关于安装yii2 高级模板"></a>一 关于安装yii2 高级模板</h2><pre><code>1. 执行composer self-update.确保你的composer是最新的
2. 安装最新的Composer Asset Plugin：composer global require &quot;fxp/composer-asset-plugin:^1.2.0&quot;
3. 安装Yii2高级模板：composer create-project yiisoft/yii2-app-advanced advanced 2.0.11
</code></pre><hr>
<a id="more"></a>
<h2 id="二-配置端口或者域名"><a href="#二-配置端口或者域名" class="headerlink" title="二 配置端口或者域名"></a>二 配置端口或者域名</h2><pre><code>1.不管是advanced还是basic,配置域名或者端口,需要到目录***/www/yourProject/backend/web (建议不加上index.php)
2.当然其他配置也需要更改,过来人,不多说
</code></pre><hr>
<h2 id="三-一些常用的代码"><a href="#三-一些常用的代码" class="headerlink" title="三 一些常用的代码"></a>三 一些常用的代码</h2><pre><code>1. 打印错误:
    echo array_values($model-&gt;getFirstErrors())[0];exit;
2. 打印SQL语句: 
    $query = User::find() -&gt;where([&apos;id&apos;=&gt;[1,2,3,4]) -&gt;select([&apos;username&apos;])
    // 输出SQL语句
    $commandQuery = clone $query;
    echo $commandQuery-&gt;createCommand()-&gt;getRawSql();
    $users = $query-&gt;all();
3. 常用查询语句:
    User::find()-&gt;scalar();此方法返回值的第一行第一列的查询结果；
   User::find()-&gt;column();    此方法返回查询结果中的第一列的值；
   User::find()-&gt;andWhere([&apos;sex&apos; =&gt; &apos;男&apos;, &apos;age&apos; =&gt; &apos;24&apos;])-&gt;count(&apos;id&apos;);   统计符合条件的总条数；
   User::find()-&gt;andFilterWhere([&apos;like&apos;, &apos;name&apos;, &apos;小老板&apos;]); 此方法是用like查询name 等于小老板的数据 (备注:此方法会过滤 字段值为空的条件, 所以想要用连续查询的小老板,就用andWhere)
</code></pre><hr>
<h2 id="四-关于restful-api"><a href="#四-关于restful-api" class="headerlink" title="四 关于restful api"></a>四 关于restful api</h2><pre><code>1.搭建: 网上教程很多
2.配置: 网上也有,注意common/config/bootstrap.php 加上 Yii::setAlias(&apos;@api&apos;, dirname(dirname(__DIR__)) . &apos;/api&apos;);
3.风格: 在你的控制器里面 比如UserController.php中得加上public $modelClass = &apos;api\models\user&apos;;
4.如果你遇到了这样的问题: Your request was made with invalid credentials. 你可以在***\vendor\yiisoft\yii2\filters\auth\QueryParamAuth.php 中 authenticate 打印$accessToken 如果为空的话 改成 $accessToken = $request-&gt;headers-&gt;get($this-&gt;tokenParam);
</code></pre><hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>后面会继续分享一些东西,希望这些能帮到你...    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;给大家分享一些这段时间我学习yii2 踩得一些坑&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一-关于安装yii2-高级模板&quot;&gt;&lt;a href=&quot;#一-关于安装yii2-高级模板&quot; class=&quot;headerlink&quot; title=&quot;一 关于安装yii2 高级模板&quot;&gt;&lt;/a&gt;一 关于安装yii2 高级模板&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 执行composer self-update.确保你的composer是最新的
2. 安装最新的Composer Asset Plugin：composer global require &amp;quot;fxp/composer-asset-plugin:^1.2.0&amp;quot;
3. 安装Yii2高级模板：composer create-project yiisoft/yii2-app-advanced advanced 2.0.11
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.dannisi.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="yii" scheme="http://www.dannisi.xin/tags/yii/"/>
    
      <category term="restful api" scheme="http://www.dannisi.xin/tags/restful-api/"/>
    
  </entry>
  
  <entry>
    <title>不灭的记忆</title>
    <link href="http://www.dannisi.xin/2017/07/24/remember/"/>
    <id>http://www.dannisi.xin/2017/07/24/remember/</id>
    <published>2017-07-24T01:56:18.000Z</published>
    <updated>2017-07-24T02:58:06.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>给大家分享一些我的回忆…</p>
<hr>
<h2 id="入营"><a href="#入营" class="headerlink" title="入营"></a>入营</h2><pre><code>    2013年9月7日晚上九点多,伴随着老兵们得锣鼓声以及鞭炮声来到了军营,那是我第一次踏入军营.从大巴车下来,
我们来到了一块大的空地上,那时候已经拥挤了很多像我这样的新兵蛋子,既感到陌生又觉兴奋,还有点小刺激.
因为我们就要从这里开始分班了,这也是决定你是什么兵种,我期望的时坦乘兵,那样我就可以驾驶者坦克冲锋陷阵了.
然而,我却成为了一名装甲步兵,刚开始我是抗拒的,说好的坦乘兵呢?可是,这是部队,有铁一般的纪律,命令必须服从.
</code></pre><p>下面给大家展示一些图片…<br><a id="more"></a></p>
<h2 id="军营里的第一张照片"><a href="#军营里的第一张照片" class="headerlink" title="军营里的第一张照片"></a>军营里的第一张照片</h2><p><img src="/images/first.JPG" alt="哈哈"></p>
<hr>
<h2 id="女兵风采"><a href="#女兵风采" class="headerlink" title="女兵风采"></a>女兵风采</h2><p><img src="/images/nvbing1.jpg" alt="女兵"><br><img src="/images/nvbing2.JPG" alt="女兵"><br><img src="/images/nvbing3.JPG" alt="女兵"></p>
<p>当然这些都是文艺兵,通信兵、卫生员这些也有女兵,就不粘出来了.</p>
<hr>
<h2 id="拉练"><a href="#拉练" class="headerlink" title="拉练"></a>拉练</h2><p><img src="/images/lalian1.JPG" alt="拉练"><br><img src="/images/lalian2.JPG" alt="拉练"><br><img src="/images/lalian3.JPG" alt="拉练"></p>
<hr>
<h2 id="风景"><a href="#风景" class="headerlink" title="风景"></a>风景</h2><p><img src="/images/jingse1.jpg" alt="风景"><br><img src="/images/jingse2.jpg" alt="风景"><br><img src="/images/jingse3.jpg" alt="风景"><br><img src="/images/jingse4.jpg" alt="风景"><br><img src="/images/jingse5.jpg" alt="风景"><br><img src="/images/jingse6.jpg" alt="风景"><br><img src="/images/yingqu.jpg" alt="风景"></p>
<hr>
<h2 id="离开军营"><a href="#离开军营" class="headerlink" title="离开军营"></a>离开军营</h2><pre><code>2015年9月16晚9点,坐上离开军营的巴士车,离开我热爱的军营,再见了战友,再见了军营.
</code></pre><p><img src="/images/diandi1.JPG" alt="被子"></p>
<p>这是我在军营最后一次叠的被子,很pia了,哈哈…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;给大家分享一些我的回忆…&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;入营&quot;&gt;&lt;a href=&quot;#入营&quot; class=&quot;headerlink&quot; title=&quot;入营&quot;&gt;&lt;/a&gt;入营&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    2013年9月7日晚上九点多,伴随着老兵们得锣鼓声以及鞭炮声来到了军营,那是我第一次踏入军营.从大巴车下来,
我们来到了一块大的空地上,那时候已经拥挤了很多像我这样的新兵蛋子,既感到陌生又觉兴奋,还有点小刺激.
因为我们就要从这里开始分班了,这也是决定你是什么兵种,我期望的时坦乘兵,那样我就可以驾驶者坦克冲锋陷阵了.
然而,我却成为了一名装甲步兵,刚开始我是抗拒的,说好的坦乘兵呢?可是,这是部队,有铁一般的纪律,命令必须服从.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面给大家展示一些图片…&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.dannisi.xin/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="回忆" scheme="http://www.dannisi.xin/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="军人" scheme="http://www.dannisi.xin/tags/%E5%86%9B%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.dannisi.xin/2017/07/21/hello-world/"/>
    <id>http://www.dannisi.xin/2017/07/21/hello-world/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2017-07-24T02:59:13.070Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
      <category term="nmp" scheme="http://www.dannisi.xin/tags/nmp/"/>
    
      <category term="hexo" scheme="http://www.dannisi.xin/tags/hexo/"/>
    
      <category term="gihub" scheme="http://www.dannisi.xin/tags/gihub/"/>
    
  </entry>
  
</feed>
